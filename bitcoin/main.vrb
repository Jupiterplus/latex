\frametitle{Difficulty Target and Re-Target}
    Every 2016 blocks, all node re-target the Proof-of-Work difficulty.
    \begin{lstlisting}[language=Python]
New Difficulty = Old Difficulty * (20160 minutes / Actual Time of Last 2016 Blocks)
The Target = The maximum target / current difficulty.
The maximum target is:
    0x00000000FFFF0000000000000000000000000000000000000000000000000000 \end{lstlisting}

    Re-Target Code in bitcoind
    \begin{lstlisting}[language=C++]
    // Limit adjustment step
    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;
    LogPrintf("  nActualTimespan = %d  before bounds\n", nActualTimespan);
    if (nActualTimespan < params.nPowTargetTimespan/4)
        nActualTimespan = params.nPowTargetTimespan/4;
    if (nActualTimespan > params.nPowTargetTimespan*4)
        nActualTimespan = params.nPowTargetTimespan*4;

    // Retarget
    const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);
    arith_uint256 bnNew;
    arith_uint256 bnOld;
    bnNew.SetCompact(pindexLast->nBits);
    bnOld = bnNew;
    bnNew *= nActualTimespan;
    bnNew /= params.nPowTargetTimespan;

    if (bnNew > bnPowLimit)
        bnNew = bnPowLimit; \end{lstlisting}
